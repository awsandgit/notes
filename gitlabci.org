#+title: GitlabCI
#+Author: Rohit Singh

* Table of Contents :toc:
- [[#cicd-variables][CI/CD Variables]]
- [[#yml-files][YML Files]]
  - [[#monolithic-gitlab-ciyml][Monolithic .gitlab-ci.yml]]
  - [[#eks-gitlab-ciyml][EKS .gitlab-ci.yml]]

* CI/CD Variables
- File Type
- Variable Type
- Masked Variables
- Predefined Gitlab Variables

* YML Files
- Default Name: .gitlab-ci.yml
- Default Location: At root of the project directory

** Monolithic .gitlab-ci.yml
- Project Directory Structure:
  - *MY NodeJS Project*
    - .gitlab-ci.yml
    - *scripts/*
      - start-dev.sh
      - start-qa.sh
    - index.js
    - package.json
#+begin_src YAML
stages:
  - build
  - deploy

build:
  image: node:14
  stage: build
  script:
    - npm cache clean --force
    - npm cache verify
    - npm install --force
    - npm install typescript -g
    - if [ "$CI_COMMIT_BRANCH" == "dev" ]; then cp $DEV_ENV env && cp env .env.development; fi
    - if [ "$CI_COMMIT_BRANCH" == "qa" ]; then cp $QA_ENV env && cp env .env.qa; fi
    - if [ "$CI_COMMIT_BRANCH" == "dev" ]; then tsc; fi
    - if [ "$CI_COMMIT_BRANCH" == "qa" ]; then tsc; fi
    - if [ "$CI_COMMIT_BRANCH" == "dev" ]; then tar -czf node_backend_dev_artifact.tar.gz *; fi
    - if [ "$CI_COMMIT_BRANCH" == "qa" ]; then tar -czf node_backend_qa_artifact.tar.gz *; fi
  artifacts:
    paths:
      - node_backend_dev_artifact.tar.gz
      - node_backend_qa_artifact.tar.gz
    expire_in: 1 hrs 00 min
  only:
    - dev
    - qa

deploy:
  stage: deploy
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts

  script:
    - echo "Delploying project..."
    - if [ "$CI_COMMIT_BRANCH" == "dev" ]; then scp -rp node_backend_dev_artifact.tar.gz node_usr@$DEPLOY_SERVER_IP:/var/www/html/node_app/Backend/dev/ && ssh node_usr@$DEPLOY_SERVER_IP 'bash' < ./scripts/start_dev.sh; fi
    - if [ "$CI_COMMIT_BRANCH" == "qa" ];then scp -rp node_backend_qa_artifact.tar.gz node_usr@$DEPLOY_SERVER_IP:/var/www/html/node_app/Backend/qa/ && ssh node_usr@$DEPLOY_SERVER_IP 'bash' < ./scripts/start_qa.sh; fi
    - echo "Deployment complete."
  only:
    - dev
    - qa
#+end_src

** EKS .gitlab-ci.yml
- Project Directory Structure:
  - *MY NodeJS Project*
    - .gitlab-ci.yml
    - *.k8s-staging/*
      - deploy-staging.sh
      - deployment.yaml
      - service.yaml
    - index.js
    - Dockerfile
    - package.json
#+begin_src YAML
stages:
  - build
  - deploy
variables:
  DOCKER_REGISTRY_STG: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_STAGING:stg_nextjs$CI_COMMIT_SHORT_SHA"
  DOCKER_TLS_CERTDIR: ''
docker:
  image: docker:stable
  stage: build
  only:
    - staging
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
  script:
    - aws ecr get-login-password --region $AWS_REGION | docker login --username
      AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    - if [ "$CI_COMMIT_BRANCH" ==  "staging" ] ; then docker build -t $DOCKER_REGISTRY_STG . ; fi
    - if [ "$CI_COMMIT_BRANCH" ==  "staging" ] ; then docker push $DOCKER_REGISTRY_STG ; fi

deploy:
  stage: deploy
  only:
    - staging
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  artifacts:
    exclude:
      - '*'
  script:
    - export TOKEN=$(aws ecr get-login-password --region $AWS_REGION)
    - curl -LO
      https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv kubectl /usr/bin/
    - kubectl version --short --client
    - aws configure set region us-east-1
    - if [ "$CI_COMMIT_BRANCH" ==  "staging" ] ; then aws eks update-kubeconfig --region $AWS_REGION --name $K8_STAGING_CLUSTER ; fi
    - if [ "$CI_COMMIT_BRANCH" ==  "staging" ] ; then sh .k8s-staging/deploy-staging.sh ; fi
    - if [ "$CI_COMMIT_BRANCH" ==  "staging" ] ; then kubectl apply -f .k8s-staging/service.yaml ; fi

#+end_src
