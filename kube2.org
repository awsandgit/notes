#+title: Kubernetes Ingress
#+Author: Rohit Singh

** Table of contents :toc:
  - [[#simple-ingress][Simple Ingress]]
  - [[#simple-ingress-with-ssl][Simple Ingress with SSL]]
  - [[#host-based-ingress-with-ssl][Host-based Ingress with SSL]]
  - [[#path-based-ingress][Path-based Ingress]]
  - [[#switch-to-different-cluster-if-contexts-are-set][Switch to different cluster if contexts are set]]

** Simple Ingress
#+begin_src yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 namespace: myns
 name: simple-ingress
 annotations:
   alb.ingress.kubernetes.io/subnets: subnet-id1, subnet-id2, subnet-id3
   alb.ingress.kubernetes.io/scheme: internet-facing
   alb.ingress.kubernetes.io/success-codes: "200-499"
   alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
   alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10
spec:
  ingressClassName: alb
  defaultBackend:
    service:
      name: my-service
      port:
        number: 8080
#+end_src

** Simple Ingress with SSL
- Issue a certificate for your domain on AWS Certificate Manager
- Note down that ARN of the certificate and use below
#+begin_src yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: myns
  name: simple-ssl-ingress
  annotations:
    alb.ingress.kubernetes.io/subnets: subnet-id1, subnet-id2, subnet-id3
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200-499'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-south-1:111222333444:certificate/abdcdkjf-dfjdkfj-df0
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  defaultBackend:
    service:
      name: my-service
      port:
        number: 8080
#+end_src

** Host-based Ingress with SSL
#+begin_src yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: myns
  name: host-based-ingress
  annotations:
    alb.ingress.kubernetes.io/subnets: subnet-id1, subnet-id2, subnet-id3
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200-499'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-south-1:111222333444:certificate/abdcdkjf-dfjdkfj-df0
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  ingressClassName: alb
  rules:
    - host: subdomain1.domain.in
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: my-service1
                port:
                 number: 8081
    - host: subdomain2.domain.in
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: my-service2
                port:
                  number: 8082
#+end_src

** Path-based Ingress
#+begin_src yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: myns
  name: path-based-ingress
  annotations:
    alb.ingress.kubernetes.io/subnets: subnet-id1, subnet-id2, subnet-id3
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200-499'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-south-1:111222333444:certificate/abdcdkjf-dfjdkfj-df0
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
spec:
  rules:
    - http:
        paths:
          - pathType: ImplementationSpecific
            path: /php*
            backend:
              service:
                name: php-svc
                port:
                  number: 80
          - pathType: ImplementationSpecific
            path: /hello*
            backend:
              service:
                name: hello-svc
                port:
                  number: 80
          - pathType: ImplementationSpecific
            path: /apache*
            backend:
              service:
                name: apache-svc
                port:
                  number: 80
          - pathType: ImplementationSpecific
            path: /*
            backend:
              service:
                name: nginx-svc
                port:
                  number: 80
#+end_src

** Switch to different cluster if contexts are set
#+begin_src bash
#to list contexts
kubectl config get-contexts
kubectl config use-context arn:aws:eks:us-east-1:111222333444:cluster/first-eks-cluster
#+end_src
